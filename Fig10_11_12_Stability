import pandas as pd

# Set display options to avoid truncation
pd.set_option('display.max_columns', None)  # Show all columns
pd.set_option('display.width', 0)          # Disable line wrapping

import numpy as np
from scipy.optimize import minimize
from scipy.stats import norm
import matplotlib.pyplot as plt

# Simulation Function
def run_simulation(num_subjects, num_trials):
    results = []
    true_params = []  # To store true parameters for each subject
    for subject in range(num_subjects):
        boundary = np.random.uniform(0, 1)
        sigma = np.random.uniform(0.1, 1.0)
        true_params.append({'subject': subject, 'boundary': boundary, 'sigma': sigma})  # Save true parameters
        for trial in range(num_trials):
            mu = np.random.uniform(-2, 2)  # Generate a new stimulus (given evidence) mu for each trial
            percept = np.random.normal(mu, sigma)  # Generate percept based on Gaussian(mu, sigma)
            decision = 'right' if percept > boundary else 'left'
            results.append({
                'subject': subject,
                'trial': trial,
                'mu': mu,
                'percept': percept,
                'boundary': boundary,
                'sigma': sigma,
                'decision': decision
            })
    results_df = pd.DataFrame(results)
    true_params_df = pd.DataFrame(true_params)  # Create a DataFrame for true parameters
    return results_df, true_params_df

# Log-Likelihood Function
def log_likelihood(params, data):
    boundary, sigma = params
    epsilon = 1e-10  # Small value to avoid log(0)
    ll = 0
    for _, row in data.iterrows():
        mu = row['mu']
        decision = row['decision']
        cdf_val = norm.cdf(boundary, loc=mu, scale=sigma)
        if decision == 'right':
            prob = max(1 - cdf_val, epsilon)  # Avoid values too close to 0
        else:
            prob = max(cdf_val, epsilon)  # Avoid values too close to 0
        ll += np.log(prob)
    return -ll

# Parameter Inference Function
def infer_parameters(results_df):
    inferred_params = []
    for subject in results_df['subject'].unique():
        subject_data = results_df[results_df['subject'] == subject]
        initial_guess = [0.5, 0.5]  # boundary, sigma
        bounds = [(0, 1), (0.1, 2)]
        result = minimize(log_likelihood, initial_guess, args=(subject_data,), bounds=bounds)
        inferred_params.append({
            'subject': subject,
            'boundary': result.x[0],
            'sigma': result.x[1]
        })
    return pd.DataFrame(inferred_params)

# Run the simulation
num_subjects = 100
num_trials = 100
results_df, true_params_df = run_simulation(num_subjects, num_trials)

# Infer parameters
inferred_params_df = infer_parameters(results_df)

# Merge inferred and true parameters for comparison
comparison_df = pd.merge(inferred_params_df, true_params_df, on='subject', suffixes=('_inferred', '_true'))

# Calculate differences
comparison_df['boundary_error'] = comparison_df['boundary_inferred'] - comparison_df['boundary_true']
comparison_df['sigma_error'] = comparison_df['sigma_inferred'] - comparison_df['sigma_true']

# Print comparison DataFrame
print(comparison_df)

# Visualization: Boundary
plt.scatter(comparison_df['boundary_true'], comparison_df['boundary_inferred'], label='Boundary')
plt.plot([0, 1], [0, 1], color='red', linestyle='--', label='Perfect Recovery')
plt.xlabel('True Boundary', fontsize=16)
plt.ylabel('Inferred Boundary', fontsize=16)
plt.legend(fontsize=14)
plt.title('Boundary Recovery', fontsize=18)
plt.savefig("boundary_recovery.svg", format="svg")
plt.show()

# Visualization: Sigma
plt.scatter(comparison_df['sigma_true'], comparison_df['sigma_inferred'], label='Sigma')
plt.plot([0.1, 1], [0.1, 1], color='red', linestyle='--', label='Perfect Recovery')
plt.xlabel('True Sigma', fontsize=16)
plt.ylabel('Inferred Sigma', fontsize=16)
plt.legend(fontsize=14)
plt.title('Sigma Recovery', fontsize=18)
plt.savefig("sigma_recovery.svg", format="svg")
plt.show()

# Visualization: Correlation between inferred parameters
def compute_and_plot_correlation(df):
    correlation = df['boundary_inferred'].corr(df['sigma_inferred'])

    plt.scatter(df['sigma_inferred'], df['boundary_inferred'], label='Inferred')
    plt.plot([0.1, 1], [0.1, 1], color='red', linestyle='--', label='Correlation')
    plt.xlabel('Inferred Sigma', fontsize=16)
    plt.ylabel('Inferred Boundary', fontsize=16)
    plt.legend(fontsize=14)
    plt.title(f'Inferred Boundary-Sigma Correlation\n(r = {correlation:.3f})', fontsize=18)
    plt.savefig("inferred_correlation.svg", format="svg")
    plt.show()

    print(f"Inferred Boundary-Sigma Correlation: {correlation}")
    return correlation

for i in range(5):  # Runs it 5 times
    results_df, true_params_df = run_simulation(num_subjects, num_trials)
    inferred_params_df = infer_parameters(results_df)
    comparison_df = pd.merge(inferred_params_df, true_params_df, on='subject', suffixes=('_inferred', '_true'))

    correlation = compute_and_plot_correlation(comparison_df)
