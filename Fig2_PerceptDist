import matplotlib
matplotlib.use('TkAgg')

import numpy as np
import matplotlib.pyplot as plt

# Parameters for easy stimuli
mu_easy = 2.0  # mean of the provided evidence (x)
sigma_easy = 1.0  # standard deviation (perceptual noise)
num_samples = 100  # number of trials
decision_boundary = 0  # decision boundary (b)

# Parameters for neutral stimuli
mu_neutral = 0  # mean of the provided evidence (x)
sigma_neutral = 1.0

# Parameters for difficult stimuli
mu_difficult = 0.5  # mean of the provided evidence (x)
sigma_difficult = 1.0

# Generate percepts for easy, neutral, and difficult stimuli
percepts_easy = np.random.normal(mu_easy, sigma_easy, num_samples)
percepts_neutral = np.random.normal(mu_neutral, sigma_neutral, num_samples)
percepts_difficult = np.random.normal(mu_difficult, sigma_difficult, num_samples)

# Determine correctness for each condition
correct_decisions_easy = percepts_easy > decision_boundary
correct_decisions_neutral = percepts_neutral > decision_boundary
correct_decisions_difficult = percepts_difficult > decision_boundary

# Calculate accuracy for each condition
accuracy_easy = np.mean(correct_decisions_easy)
accuracy_neutral = np.mean(correct_decisions_neutral)
accuracy_difficult = np.mean(correct_decisions_difficult)

print(f"Average accuracy for easy stimuli: {accuracy_easy * 100:.2f}%")
print(f"Average accuracy for neutral stimuli: {accuracy_neutral * 100:.2f}%")
print(f"Average accuracy for difficult stimuli: {accuracy_difficult * 100:.2f}%")

# Create a figure with 3 subplots
fig, axs = plt.subplots(1, 3, figsize=(15, 5))

# Plot for easy stimuli
x_easy = np.linspace(-8, 8, 1000)
y_easy = (1 / (np.sqrt(2 * np.pi) * sigma_easy)) * np.exp(-0.5 * ((x_easy - mu_easy) / sigma_easy) ** 2)
axs[0].plot(x_easy, y_easy, label='Normal Distribution (μ, σ)')
axs[0].axvline(x=decision_boundary, color='red', linestyle='--', label='Decision Boundary (b=0)')
axs[0].axvline(x=mu_easy, color='green', linestyle='--', label='Provided Evidence (μ)')
axs[0].scatter(percepts_easy, np.zeros_like(percepts_easy), color='blue', marker='|', s=100, alpha=0.6, label='Percepts')
axs[0].set_xlim([-7.5, 7.5])
axs[0].set_ylim(bottom=0)
axs[0].set_title('Distribution of Percepts for Easy Stimuli')
axs[0].set_xlabel('Decision Axis')
axs[0].set_ylabel('Probability Density')
axs[0].legend()

# Plot for neutral stimuli
x_neutral = np.linspace(-7.5, 7.5, 1000)
y_neutral = (1 / (np.sqrt(2 * np.pi) * sigma_neutral)) * np.exp(-0.5 * ((x_neutral - mu_neutral) / sigma_neutral) ** 2)
axs[1].plot(x_neutral, y_neutral, label='Normal Distribution (μ, σ)')
axs[1].axvline(x=decision_boundary, color='red', linestyle='--', label='Decision Boundary (b=0)')
axs[1].axvline(x=mu_neutral, color='green', linestyle='--', label='Provided Evidence (μ)')
axs[1].scatter(percepts_neutral, np.zeros_like(percepts_neutral), color='blue', marker='|', s=100, alpha=0.6, label='Percepts')
axs[1].set_xlim([-7.5, 7.5])
axs[1].set_ylim(bottom=0)
axs[1].set_title('Distribution of Percepts for Neutral Evidence Stimuli')
axs[1].set_xlabel('Decision Axis')
axs[1].set_ylabel('Probability Density')
axs[1].legend()

# Plot for difficult stimuli
x_difficult = np.linspace(-7.5, 7.5, 1000)
y_difficult = (1 / (np.sqrt(2 * np.pi) * sigma_difficult)) * np.exp(-0.5 * ((x_difficult - mu_difficult) / sigma_difficult) ** 2)
axs[2].plot(x_difficult, y_difficult, label='Normal Distribution (μ, σ)')
axs[2].axvline(x=decision_boundary, color='red', linestyle='--', label='Decision Boundary (b=0)')
axs[2].axvline(x=mu_difficult, color='green', linestyle='--', label='Provided Evidence (μ)')
axs[2].scatter(percepts_difficult, np.zeros_like(percepts_difficult), color='blue', marker='|', s=100, alpha=0.6, label='Percepts')
axs[2].set_xlim([-7.5, 7.5])
axs[2].set_ylim(bottom=0)
axs[2].set_title('Distribution of Percepts for Difficult Stimuli')
axs[2].set_xlabel('Decision Axis')
axs[2].set_ylabel('Probability Density')
axs[2].legend()

# Adjust layout and display the plots
plt.tight_layout()
plt.show()
